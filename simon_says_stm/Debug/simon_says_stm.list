
simon_says_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002728  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002828  08002828  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002828  08002828  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002828  08002828  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000028  08002858  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002858  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064f0  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001655  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00027b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  00028210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012797  00000000  00000000  000287d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078cf  00000000  00000000  0003af67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074343  00000000  00000000  00042836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6b79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015bc  00000000  00000000  000b6bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027d0 	.word	0x080027d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	080027d0 	.word	0x080027d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <setPinsAsInputs>:
/**
 * @brief			Function which sets the four GPIO pins as inputs
 *
 * @returns			None
 */
void setPinsAsInputs() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	2314      	movs	r3, #20
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f002 fac6 	bl	80027c0 <memset>

	/*Configure GPIO pin : LED_1_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_1_BLUE_Pin;
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2201      	movs	r2, #1
 8000244:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_1_BLUE_GPIO_Port, &GPIO_InitStruct);
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <setPinsAsInputs+0x68>)
 8000250:	0019      	movs	r1, r3
 8000252:	0010      	movs	r0, r2
 8000254:	f001 fcb8 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_2_YELLOW_Pin LED_3_GREEN_Pin LED_4_RED_Pin */
	GPIO_InitStruct.Pin = LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin;
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <setPinsAsInputs+0x6c>)
 800025c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2201      	movs	r2, #1
 8000268:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	1d3a      	adds	r2, r7, #4
 8000272:	23a0      	movs	r3, #160	; 0xa0
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	0011      	movs	r1, r2
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fca5 	bl	8001bc8 <HAL_GPIO_Init>

}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b006      	add	sp, #24
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	50000400 	.word	0x50000400
 800028c:	00001801 	.word	0x00001801

08000290 <setPinsAsOutputs>:
/**
 * @brief			Function which sets the four GPIO pins as outputs
 *
 * @returns			None
 */
void setPinsAsOutputs() {
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	0018      	movs	r0, r3
 800029a:	2314      	movs	r3, #20
 800029c:	001a      	movs	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	f002 fa8e 	bl	80027c0 <memset>

	/*Configure GPIO pin : LED_1_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_1_BLUE_Pin;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2201      	movs	r2, #1
 80002ae:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2202      	movs	r2, #2
 80002b4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_1_BLUE_GPIO_Port, &GPIO_InitStruct);
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <setPinsAsOutputs+0x68>)
 80002c0:	0019      	movs	r1, r3
 80002c2:	0010      	movs	r0, r2
 80002c4:	f001 fc80 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_2_YELLOW_Pin LED_3_GREEN_Pin LED_4_RED_Pin */
	GPIO_InitStruct.Pin = LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin;
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <setPinsAsOutputs+0x6c>)
 80002cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2201      	movs	r2, #1
 80002d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2202      	movs	r2, #2
 80002d8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e0:	1d3a      	adds	r2, r7, #4
 80002e2:	23a0      	movs	r3, #160	; 0xa0
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fc6d 	bl	8001bc8 <HAL_GPIO_Init>
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b006      	add	sp, #24
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	50000400 	.word	0x50000400
 80002fc:	00001801 	.word	0x00001801

08000300 <showStartAnimation>:
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 *
 * @returns			None
 */
void showStartAnimation(GPIO_TypeDef * portList[], uint16_t  * pinList)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	int i;
	int j;

	setPinsAsOutputs();
 800030a:	f7ff ffc1 	bl	8000290 <setPinsAsOutputs>

	for (j = 0; j < 2; j++) {
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	e036      	b.n	8000382 <showStartAnimation+0x82>
		for (i = 0; i < 4; i++) {
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	e013      	b.n	8000342 <showStartAnimation+0x42>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_RESET);
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	18d3      	adds	r3, r2, r3
 8000322:	6818      	ldr	r0, [r3, #0]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	683a      	ldr	r2, [r7, #0]
 800032a:	18d3      	adds	r3, r2, r3
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	2200      	movs	r2, #0
 8000330:	0019      	movs	r1, r3
 8000332:	f001 fdd0 	bl	8001ed6 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000336:	2064      	movs	r0, #100	; 0x64
 8000338:	f000 fdca 	bl	8000ed0 <HAL_Delay>
		for (i = 0; i < 4; i++) {
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3301      	adds	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	2b03      	cmp	r3, #3
 8000346:	dde8      	ble.n	800031a <showStartAnimation+0x1a>
		}
		for (i = 0; i < 4; i++) {
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e013      	b.n	8000376 <showStartAnimation+0x76>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_SET);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	18d3      	adds	r3, r2, r3
 8000356:	6818      	ldr	r0, [r3, #0]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	683a      	ldr	r2, [r7, #0]
 800035e:	18d3      	adds	r3, r2, r3
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	2201      	movs	r2, #1
 8000364:	0019      	movs	r1, r3
 8000366:	f001 fdb6 	bl	8001ed6 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800036a:	2064      	movs	r0, #100	; 0x64
 800036c:	f000 fdb0 	bl	8000ed0 <HAL_Delay>
		for (i = 0; i < 4; i++) {
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	3301      	adds	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2b03      	cmp	r3, #3
 800037a:	dde8      	ble.n	800034e <showStartAnimation+0x4e>
	for (j = 0; j < 2; j++) {
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	3301      	adds	r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	2b01      	cmp	r3, #1
 8000386:	ddc5      	ble.n	8000314 <showStartAnimation+0x14>
		}
	}
	HAL_Delay(1000);
 8000388:	23fa      	movs	r3, #250	; 0xfa
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fd9f 	bl	8000ed0 <HAL_Delay>
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b004      	add	sp, #16
 8000398:	bd80      	pop	{r7, pc}

0800039a <showSequence>:
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 *
 * @returns			None
 */
void showSequence(uint8_t *_s, uint8_t _n, ADC_HandleTypeDef *hadc, uint8_t * delayTimes, GPIO_TypeDef * portList[], uint16_t  * pinList) {
 800039a:	b590      	push	{r4, r7, lr}
 800039c:	b087      	sub	sp, #28
 800039e:	af00      	add	r7, sp, #0
 80003a0:	60f8      	str	r0, [r7, #12]
 80003a2:	607a      	str	r2, [r7, #4]
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	200b      	movs	r0, #11
 80003a8:	183b      	adds	r3, r7, r0
 80003aa:	1c0a      	adds	r2, r1, #0
 80003ac:	701a      	strb	r2, [r3, #0]
	int i;
	_s[_n] = calculateNewRandom(hadc);
 80003ae:	183b      	adds	r3, r7, r0
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	68fa      	ldr	r2, [r7, #12]
 80003b4:	18d4      	adds	r4, r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 f861 	bl	8000480 <calculateNewRandom>
 80003be:	0003      	movs	r3, r0
 80003c0:	7023      	strb	r3, [r4, #0]
	setPinsAsOutputs();
 80003c2:	f7ff ff65 	bl	8000290 <setPinsAsOutputs>
	for (i = 0; i <= _n; i++) {
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	e04d      	b.n	8000468 <showSequence+0xce>
		HAL_GPIO_WritePin(portList[_s[i]], pinList[_s[i]], GPIO_PIN_RESET);
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	18d3      	adds	r3, r2, r3
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003d8:	18d3      	adds	r3, r2, r3
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	18d3      	adds	r3, r2, r3
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003e8:	18d3      	adds	r3, r2, r3
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	2200      	movs	r2, #0
 80003ee:	0019      	movs	r1, r3
 80003f0:	f001 fd71 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(delayTimes[(_n / 50) & 3]);
 80003f4:	240b      	movs	r4, #11
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2132      	movs	r1, #50	; 0x32
 80003fc:	0018      	movs	r0, r3
 80003fe:	f7ff fe83 	bl	8000108 <__udivsi3>
 8000402:	0003      	movs	r3, r0
 8000404:	b2db      	uxtb	r3, r3
 8000406:	001a      	movs	r2, r3
 8000408:	2303      	movs	r3, #3
 800040a:	4013      	ands	r3, r2
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	18d3      	adds	r3, r2, r3
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fd5c 	bl	8000ed0 <HAL_Delay>
		HAL_GPIO_WritePin(portList[_s[i]], pinList[_s[i]], GPIO_PIN_SET);
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	18d3      	adds	r3, r2, r3
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000424:	18d3      	adds	r3, r2, r3
 8000426:	6818      	ldr	r0, [r3, #0]
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	18d3      	adds	r3, r2, r3
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000434:	18d3      	adds	r3, r2, r3
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	2201      	movs	r2, #1
 800043a:	0019      	movs	r1, r3
 800043c:	f001 fd4b 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(delayTimes[(_n / 50) & 3]);
 8000440:	193b      	adds	r3, r7, r4
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2132      	movs	r1, #50	; 0x32
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff fe5e 	bl	8000108 <__udivsi3>
 800044c:	0003      	movs	r3, r0
 800044e:	b2db      	uxtb	r3, r3
 8000450:	001a      	movs	r2, r3
 8000452:	2303      	movs	r3, #3
 8000454:	4013      	ands	r3, r2
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	18d3      	adds	r3, r2, r3
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fd37 	bl	8000ed0 <HAL_Delay>
	for (i = 0; i <= _n; i++) {
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	230b      	movs	r3, #11
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	429a      	cmp	r2, r3
 8000472:	ddab      	ble.n	80003cc <showSequence+0x32>
	}
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b007      	add	sp, #28
 800047c:	bd90      	pop	{r4, r7, pc}
	...

08000480 <calculateNewRandom>:
/**
 * @brief			Calculate a random number in range 0-3
 *
 * @params			ADC_HandleTypeDef *hadc: Pointer to ADC object to read noise from ADC to get the seed
 */
uint8_t calculateNewRandom(ADC_HandleTypeDef *hadc) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

	uint16_t seed;
	uint8_t temp;
	int i;
	//Get the data
	for (i = 0; i < 25; i++) {
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	e00e      	b.n	80004ac <calculateNewRandom+0x2c>
		seed ^= HAL_ADC_GetValue(hadc);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	0018      	movs	r0, r3
 8000492:	f001 f885 	bl	80015a0 <HAL_ADC_GetValue>
 8000496:	0003      	movs	r3, r0
 8000498:	b299      	uxth	r1, r3
 800049a:	2216      	movs	r2, #22
 800049c:	18bb      	adds	r3, r7, r2
 800049e:	18ba      	adds	r2, r7, r2
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	404a      	eors	r2, r1
 80004a4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 25; i++) {
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	3301      	adds	r3, #1
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	2b18      	cmp	r3, #24
 80004b0:	dded      	ble.n	800048e <calculateNewRandom+0xe>
	}
	//Shuffle the seed
	seed = 2053 * seed + 13849;
 80004b2:	2116      	movs	r1, #22
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	1c1a      	adds	r2, r3, #0
 80004ba:	0252      	lsls	r2, r2, #9
 80004bc:	18d2      	adds	r2, r2, r3
 80004be:	0092      	lsls	r2, r2, #2
 80004c0:	18d3      	adds	r3, r2, r3
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	4815      	ldr	r0, [pc, #84]	; (800051c <calculateNewRandom+0x9c>)
 80004c8:	4684      	mov	ip, r0
 80004ca:	4462      	add	r2, ip
 80004cc:	801a      	strh	r2, [r3, #0]
	//XOR two bytes
	temp = seed ^ (seed >> 8);
 80004ce:	000a      	movs	r2, r1
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	b2d9      	uxtb	r1, r3
 80004da:	18bb      	adds	r3, r7, r2
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	200f      	movs	r0, #15
 80004e2:	183b      	adds	r3, r7, r0
 80004e4:	404a      	eors	r2, r1
 80004e6:	701a      	strb	r2, [r3, #0]
	//XOR two nibbles
	temp ^= (temp >> 4);
 80004e8:	183b      	adds	r3, r7, r0
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	091b      	lsrs	r3, r3, #4
 80004ee:	b2d9      	uxtb	r1, r3
 80004f0:	183b      	adds	r3, r7, r0
 80004f2:	183a      	adds	r2, r7, r0
 80004f4:	7812      	ldrb	r2, [r2, #0]
 80004f6:	404a      	eors	r2, r1
 80004f8:	701a      	strb	r2, [r3, #0]
	//XOR two pairs of bits and return remainder after division by 4
	return (temp ^ (temp >> 2)) & 0b00000011;
 80004fa:	0001      	movs	r1, r0
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	089b      	lsrs	r3, r3, #2
 8000502:	b2da      	uxtb	r2, r3
 8000504:	187b      	adds	r3, r7, r1
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4053      	eors	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2203      	movs	r2, #3
 800050e:	4013      	ands	r3, r2
 8000510:	b2db      	uxtb	r3, r3
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b006      	add	sp, #24
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	00003619 	.word	0x00003619

08000520 <getKeys>:
 *
 * @params			GPIO_TypeDef * portList[]: Array of ports which are used for GPIO
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 */
uint8_t getKeys(uint8_t keys[], uint8_t steps, GPIO_TypeDef * portList[], uint16_t  * pinList) {
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	607a      	str	r2, [r7, #4]
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	230b      	movs	r3, #11
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	1c0a      	adds	r2, r1, #0
 8000532:	701a      	strb	r2, [r3, #0]
	uint8_t n = 0;
 8000534:	231f      	movs	r3, #31
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
	uint8_t _b;
	int i;
// We have to read the keys
	setPinsAsInputs();
 800053c:	f7ff fe70 	bl	8000220 <setPinsAsInputs>
	while (n <= steps) {
 8000540:	e055      	b.n	80005ee <getKeys+0xce>
		do {
			_b = getButtons(portList, pinList);
 8000542:	2517      	movs	r5, #23
 8000544:	197c      	adds	r4, r7, r5
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f000 f85b 	bl	8000608 <getButtons>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]
		} while (_b == 0);
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f1      	beq.n	8000542 <getKeys+0x22>

		for (i = 0; i < 4; i++) {
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	e00b      	b.n	800057c <getKeys+0x5c>
			if (_b & (1 << i))
 8000564:	2317      	movs	r3, #23
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	411a      	asrs	r2, r3
 800056e:	0013      	movs	r3, r2
 8000570:	2201      	movs	r2, #1
 8000572:	4013      	ands	r3, r2
 8000574:	d106      	bne.n	8000584 <getKeys+0x64>
		for (i = 0; i < 4; i++) {
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	3301      	adds	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	2b03      	cmp	r3, #3
 8000580:	ddf0      	ble.n	8000564 <getKeys+0x44>
 8000582:	e000      	b.n	8000586 <getKeys+0x66>
				break;
 8000584:	46c0      	nop			; (mov r8, r8)
		}
		HAL_Delay(25);
 8000586:	2019      	movs	r0, #25
 8000588:	f000 fca2 	bl	8000ed0 <HAL_Delay>
		if (HAL_GPIO_ReadPin(portList[i], pinList[i]) == GPIO_PIN_RESET) {
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	18d3      	adds	r3, r2, r3
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	0019      	movs	r1, r3
 80005a2:	f001 fc7b 	bl	8001e9c <HAL_GPIO_ReadPin>
 80005a6:	0003      	movs	r3, r0
 80005a8:	0019      	movs	r1, r3
 80005aa:	221f      	movs	r2, #31
 80005ac:	18bb      	adds	r3, r7, r2
 80005ae:	18ba      	adds	r2, r7, r2
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d11a      	bne.n	80005ee <getKeys+0xce>
			while (getButtons(portList, pinList))
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 f821 	bl	8000608 <getButtons>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d1f7      	bne.n	80005ba <getKeys+0x9a>
				;
			if (keys[n] != i)
 80005ca:	231f      	movs	r3, #31
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	001a      	movs	r2, r3
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	4293      	cmp	r3, r2
 80005dc:	d001      	beq.n	80005e2 <getKeys+0xc2>
				return 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	e00e      	b.n	8000600 <getKeys+0xe0>
			n++;
 80005e2:	211f      	movs	r1, #31
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	3201      	adds	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
	while (n <= steps) {
 80005ee:	231f      	movs	r3, #31
 80005f0:	18fa      	adds	r2, r7, r3
 80005f2:	230b      	movs	r3, #11
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d9a1      	bls.n	8000542 <getKeys+0x22>
		}
	}
	return 1;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b008      	add	sp, #32
 8000606:	bdb0      	pop	{r4, r5, r7, pc}

08000608 <getButtons>:
 *
 * @params			GPIO_TypeDef * portList[]: Array of ports which are used for GPIO
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 */
uint8_t getButtons(GPIO_TypeDef * portList[], uint16_t  * pinList) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	uint8_t _buttons = 0;
 8000612:	2317      	movs	r3, #23
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	setPinsAsInputs();
 800061a:	f7ff fe01 	bl	8000220 <setPinsAsInputs>

	for (int i = 0; i < 4; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	e022      	b.n	800066a <getButtons+0x62>
		int pinState = HAL_GPIO_ReadPin(portList[i], pinList[i]);
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	18d3      	adds	r3, r2, r3
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	18d3      	adds	r3, r2, r3
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	0019      	movs	r1, r3
 800063a:	f001 fc2f 	bl	8001e9c <HAL_GPIO_ReadPin>
 800063e:	0003      	movs	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]
		_buttons |= !pinState << i;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	425a      	negs	r2, r3
 8000646:	4153      	adcs	r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	001a      	movs	r2, r3
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	409a      	lsls	r2, r3
 8000650:	0013      	movs	r3, r2
 8000652:	b25a      	sxtb	r2, r3
 8000654:	2117      	movs	r1, #23
 8000656:	187b      	adds	r3, r7, r1
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b25b      	sxtb	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b25a      	sxtb	r2, r3
 8000660:	187b      	adds	r3, r7, r1
 8000662:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	3301      	adds	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	2b03      	cmp	r3, #3
 800066e:	ddd9      	ble.n	8000624 <getButtons+0x1c>
	}
	_buttons &= 0x0f;
 8000670:	2017      	movs	r0, #23
 8000672:	183b      	adds	r3, r7, r0
 8000674:	183a      	adds	r2, r7, r0
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	210f      	movs	r1, #15
 800067a:	400a      	ands	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]

	return (_buttons);
 800067e:	183b      	adds	r3, r7, r0
 8000680:	781b      	ldrb	r3, [r3, #0]
}
 8000682:	0018      	movs	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	b006      	add	sp, #24
 8000688:	bd80      	pop	{r7, pc}

0800068a <showFailAnimation>:
 *
 * @params			GPIO_TypeDef * portList[]: Array of ports which are used for GPIO
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 */
void showFailAnimation(GPIO_TypeDef * portList[], uint16_t  * pinList) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
	int i;
	int j;
	setPinsAsOutputs();
 8000694:	f7ff fdfc 	bl	8000290 <setPinsAsOutputs>
	for (j = 0; j < 2; j++) {
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	e036      	b.n	800070c <showFailAnimation+0x82>
		for (i = 0; i < 4; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e010      	b.n	80006c6 <showFailAnimation+0x3c>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_RESET);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	18d3      	adds	r3, r2, r3
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	18d3      	adds	r3, r2, r3
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	0019      	movs	r1, r3
 80006bc:	f001 fc0b 	bl	8001ed6 <HAL_GPIO_WritePin>
		for (i = 0; i < 4; i++) {
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	ddeb      	ble.n	80006a4 <showFailAnimation+0x1a>
		}
		HAL_Delay(250);
 80006cc:	20fa      	movs	r0, #250	; 0xfa
 80006ce:	f000 fbff 	bl	8000ed0 <HAL_Delay>
		for (i = 0; i < 4; i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e010      	b.n	80006fa <showFailAnimation+0x70>
			HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_SET);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	18d3      	adds	r3, r2, r3
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	18d3      	adds	r3, r2, r3
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	2201      	movs	r2, #1
 80006ee:	0019      	movs	r1, r3
 80006f0:	f001 fbf1 	bl	8001ed6 <HAL_GPIO_WritePin>
		for (i = 0; i < 4; i++) {
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	ddeb      	ble.n	80006d8 <showFailAnimation+0x4e>
		}
		HAL_Delay(250);
 8000700:	20fa      	movs	r0, #250	; 0xfa
 8000702:	f000 fbe5 	bl	8000ed0 <HAL_Delay>
	for (j = 0; j < 2; j++) {
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	2b01      	cmp	r3, #1
 8000710:	ddc5      	ble.n	800069e <showFailAnimation+0x14>
	}
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b004      	add	sp, #16
 800071a:	bd80      	pop	{r7, pc}

0800071c <showResult>:
 *
 * @params			GPIO_TypeDef * portList[]: Array of ports which are used for GPIO
 *
 * @params			uint16_t * pinList: Array of pins which are used for GPIO
 */
void showResult(uint8_t _r, GPIO_TypeDef * portList[], uint16_t  * pinList) {
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	250f      	movs	r5, #15
 8000728:	197b      	adds	r3, r7, r5
 800072a:	1c02      	adds	r2, r0, #0
 800072c:	701a      	strb	r2, [r3, #0]
	uint8_t _blinks;
	uint8_t i;
	setPinsAsOutputs();
 800072e:	f7ff fdaf 	bl	8000290 <setPinsAsOutputs>
	_blinks = _r / 100;
 8000732:	2316      	movs	r3, #22
 8000734:	18fc      	adds	r4, r7, r3
 8000736:	197b      	adds	r3, r7, r5
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2164      	movs	r1, #100	; 0x64
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fce3 	bl	8000108 <__udivsi3>
 8000742:	0003      	movs	r3, r0
 8000744:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < _blinks; i++) {
 8000746:	2317      	movs	r3, #23
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e01f      	b.n	8000790 <showResult+0x74>
		HAL_GPIO_WritePin(portList[2], pinList[2], GPIO_PIN_SET);
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	3308      	adds	r3, #8
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3304      	adds	r3, #4
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	2201      	movs	r2, #1
 800075e:	0019      	movs	r1, r3
 8000760:	f001 fbb9 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_ON);
 8000764:	20c8      	movs	r0, #200	; 0xc8
 8000766:	f000 fbb3 	bl	8000ed0 <HAL_Delay>
		HAL_GPIO_WritePin(portList[2], pinList[2], GPIO_PIN_RESET);
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	3308      	adds	r3, #8
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3304      	adds	r3, #4
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2200      	movs	r2, #0
 8000778:	0019      	movs	r1, r3
 800077a:	f001 fbac 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_OFF);
 800077e:	20c8      	movs	r0, #200	; 0xc8
 8000780:	f000 fba6 	bl	8000ed0 <HAL_Delay>
	for (i = 0; i < _blinks; i++) {
 8000784:	2117      	movs	r1, #23
 8000786:	187b      	adds	r3, r7, r1
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	187b      	adds	r3, r7, r1
 800078c:	3201      	adds	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	2517      	movs	r5, #23
 8000792:	197a      	adds	r2, r7, r5
 8000794:	2416      	movs	r4, #22
 8000796:	193b      	adds	r3, r7, r4
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3d7      	bcc.n	8000750 <showResult+0x34>
	}

	_blinks = _r / 10 % 10;
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	210a      	movs	r1, #10
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff fcad 	bl	8000108 <__udivsi3>
 80007ae:	0003      	movs	r3, r0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	193c      	adds	r4, r7, r4
 80007b4:	210a      	movs	r1, #10
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fd2c 	bl	8000214 <__aeabi_uidivmod>
 80007bc:	000b      	movs	r3, r1
 80007be:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < _blinks; i++) {
 80007c0:	197b      	adds	r3, r7, r5
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e01f      	b.n	8000808 <showResult+0xec>
		HAL_GPIO_WritePin(portList[1], pinList[1], GPIO_PIN_SET);
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	3304      	adds	r3, #4
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3302      	adds	r3, #2
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2201      	movs	r2, #1
 80007d6:	0019      	movs	r1, r3
 80007d8:	f001 fb7d 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_ON);
 80007dc:	20c8      	movs	r0, #200	; 0xc8
 80007de:	f000 fb77 	bl	8000ed0 <HAL_Delay>
		HAL_GPIO_WritePin(portList[1], pinList[1], GPIO_PIN_RESET);
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3304      	adds	r3, #4
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3302      	adds	r3, #2
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	0019      	movs	r1, r3
 80007f2:	f001 fb70 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_OFF);
 80007f6:	20c8      	movs	r0, #200	; 0xc8
 80007f8:	f000 fb6a 	bl	8000ed0 <HAL_Delay>
	for (i = 0; i < _blinks; i++) {
 80007fc:	2117      	movs	r1, #23
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	187b      	adds	r3, r7, r1
 8000804:	3201      	adds	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	2517      	movs	r5, #23
 800080a:	197a      	adds	r2, r7, r5
 800080c:	2116      	movs	r1, #22
 800080e:	187b      	adds	r3, r7, r1
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3d7      	bcc.n	80007c8 <showResult+0xac>
	}

	_blinks = _r % 10;
 8000818:	187c      	adds	r4, r7, r1
 800081a:	230f      	movs	r3, #15
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	210a      	movs	r1, #10
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff fcf6 	bl	8000214 <__aeabi_uidivmod>
 8000828:	000b      	movs	r3, r1
 800082a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < _blinks; i++) {
 800082c:	197b      	adds	r3, r7, r5
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	e01b      	b.n	800086c <showResult+0x150>
		HAL_GPIO_WritePin(portList[0], pinList[0], GPIO_PIN_SET);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	2201      	movs	r2, #1
 800083e:	0019      	movs	r1, r3
 8000840:	f001 fb49 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_ON);
 8000844:	20c8      	movs	r0, #200	; 0xc8
 8000846:	f000 fb43 	bl	8000ed0 <HAL_Delay>
		HAL_GPIO_WritePin(portList[0], pinList[0], GPIO_PIN_RESET);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	0019      	movs	r1, r3
 8000856:	f001 fb3e 	bl	8001ed6 <HAL_GPIO_WritePin>
		HAL_Delay(SCORE_BLINK_OFF);
 800085a:	20c8      	movs	r0, #200	; 0xc8
 800085c:	f000 fb38 	bl	8000ed0 <HAL_Delay>
	for (i = 0; i < _blinks; i++) {
 8000860:	2117      	movs	r1, #23
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	187b      	adds	r3, r7, r1
 8000868:	3201      	adds	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	2317      	movs	r3, #23
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2316      	movs	r3, #22
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d3db      	bcc.n	8000834 <showResult+0x118>
	}
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b006      	add	sp, #24
 8000884:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000888 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800088e:	f000 faa3 	bl	8000dd8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000892:	f000 f88b 	bl	80009ac <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	// Wait 100 ms in case the finished device needs to be reprogrammed
	HAL_Delay(100);
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f000 fb1a 	bl	8000ed0 <HAL_Delay>

	// Wait four seconds before initializing debug pin SWDIO as an analog read
	// So the device can be reprogrammed (development mode)
	HAL_Delay(8000);
 800089c:	23fa      	movs	r3, #250	; 0xfa
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fb15 	bl	8000ed0 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008a6:	f000 f951 	bl	8000b4c <MX_GPIO_Init>
	MX_ADC1_Init();
 80008aa:	f000 f8c3 	bl	8000a34 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	// Begin ADC
	HAL_ADC_Start(&hadc1);
 80008ae:	4b39      	ldr	r3, [pc, #228]	; (8000994 <main+0x10c>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fe27 	bl	8001504 <HAL_ADC_Start>

	// Turn on all the pins and then show the start animation
	for (int i = 0; i < 4; i++) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	e00e      	b.n	80008da <main+0x52>
		HAL_GPIO_WritePin(portList[i], pinList[i], GPIO_PIN_SET);
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <main+0x110>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	0092      	lsls	r2, r2, #2
 80008c2:	58d0      	ldr	r0, [r2, r3]
 80008c4:	4b35      	ldr	r3, [pc, #212]	; (800099c <main+0x114>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	0052      	lsls	r2, r2, #1
 80008ca:	5ad3      	ldrh	r3, [r2, r3]
 80008cc:	2201      	movs	r2, #1
 80008ce:	0019      	movs	r1, r3
 80008d0:	f001 fb01 	bl	8001ed6 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	dded      	ble.n	80008bc <main+0x34>
	}
	showStartAnimation(portList, pinList);
 80008e0:	4a2e      	ldr	r2, [pc, #184]	; (800099c <main+0x114>)
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <main+0x110>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fd0a 	bl	8000300 <showStartAnimation>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// Main game code
	while (1) {
		if (steps < MAX_STEPS) {
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <main+0x118>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b63      	cmp	r3, #99	; 0x63
 80008f2:	d845      	bhi.n	8000980 <main+0xf8>
			showSequence(keys, steps, &hadc1, delayTimes, portList,
 80008f4:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <main+0x118>)
 80008f6:	7819      	ldrb	r1, [r3, #0]
 80008f8:	4c2a      	ldr	r4, [pc, #168]	; (80009a4 <main+0x11c>)
 80008fa:	4a26      	ldr	r2, [pc, #152]	; (8000994 <main+0x10c>)
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <main+0x120>)
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <main+0x114>)
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <main+0x110>)
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	0023      	movs	r3, r4
 8000908:	f7ff fd47 	bl	800039a <showSequence>
					pinList);
			if (getKeys(keys, steps, portList, pinList)) {
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <main+0x118>)
 800090e:	7819      	ldrb	r1, [r3, #0]
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <main+0x114>)
 8000912:	4a21      	ldr	r2, [pc, #132]	; (8000998 <main+0x110>)
 8000914:	4824      	ldr	r0, [pc, #144]	; (80009a8 <main+0x120>)
 8000916:	f7ff fe03 	bl	8000520 <getKeys>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d00b      	beq.n	8000936 <main+0xae>
				HAL_Delay(500);
 800091e:	23fa      	movs	r3, #250	; 0xfa
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fad4 	bl	8000ed0 <HAL_Delay>
				steps++;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <main+0x118>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <main+0x118>)
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e7da      	b.n	80008ec <main+0x64>
			} else {
				HAL_Delay(500);
 8000936:	23fa      	movs	r3, #250	; 0xfa
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fac8 	bl	8000ed0 <HAL_Delay>
				showFailAnimation(portList, pinList);
 8000940:	4a16      	ldr	r2, [pc, #88]	; (800099c <main+0x114>)
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <main+0x110>)
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fe9f 	bl	800068a <showFailAnimation>
				HAL_Delay(500);
 800094c:	23fa      	movs	r3, #250	; 0xfa
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fabd 	bl	8000ed0 <HAL_Delay>
				showResult(132, portList, pinList);
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <main+0x114>)
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <main+0x110>)
 800095a:	0019      	movs	r1, r3
 800095c:	2084      	movs	r0, #132	; 0x84
 800095e:	f7ff fedd 	bl	800071c <showResult>
				HAL_Delay(500);
 8000962:	23fa      	movs	r3, #250	; 0xfa
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fab2 	bl	8000ed0 <HAL_Delay>
				steps = 0;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <main+0x118>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
				showStartAnimation(portList, pinList);
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <main+0x114>)
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <main+0x110>)
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fcc1 	bl	8000300 <showStartAnimation>
 800097e:	e7b5      	b.n	80008ec <main+0x64>
			}
		} else {
			while (1) {
				steps = 0;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <main+0x118>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
				showStartAnimation(portList, pinList);
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <main+0x114>)
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <main+0x110>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fcb7 	bl	8000300 <showStartAnimation>
				steps = 0;
 8000992:	e7f5      	b.n	8000980 <main+0xf8>
 8000994:	20000044 	.word	0x20000044
 8000998:	20000000 	.word	0x20000000
 800099c:	20000010 	.word	0x20000010
 80009a0:	2000010c 	.word	0x2000010c
 80009a4:	20000018 	.word	0x20000018
 80009a8:	200000a8 	.word	0x200000a8

080009ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08d      	sub	sp, #52	; 0x34
 80009b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009b2:	2414      	movs	r4, #20
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	231c      	movs	r3, #28
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f001 feff 	bl	80027c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009c2:	003b      	movs	r3, r7
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f001 fef8 	bl	80027c0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2202      	movs	r2, #2
 80009d4:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	0052      	lsls	r2, r2, #1
 80009dc:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV32;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	22a0      	movs	r2, #160	; 0xa0
 80009e2:	0192      	lsls	r2, r2, #6
 80009e4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2240      	movs	r2, #64	; 0x40
 80009ea:	615a      	str	r2, [r3, #20]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fa8e 	bl	8001f10 <HAL_RCC_OscConfig>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x50>
		Error_Handler();
 80009f8:	f000 f90c 	bl	8000c14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009fc:	003b      	movs	r3, r7
 80009fe:	2207      	movs	r2, #7
 8000a00:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a02:	003b      	movs	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fc70 	bl	8002304 <HAL_RCC_ClockConfig>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x80>
		Error_Handler();
 8000a28:	f000 f8f4 	bl	8000c14 <Error_Handler>
	}
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b00d      	add	sp, #52	; 0x34
 8000a32:	bd90      	pop	{r4, r7, pc}

08000a34 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000a3a:	231c      	movs	r3, #28
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	230c      	movs	r3, #12
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f001 febb 	bl	80027c0 <memset>

	/* USER CODE BEGIN ADC1_Init 1 */
	GPIO_InitTypeDef gpioInit;
	__GPIOA_CLK_ENABLE()
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <MX_ADC1_Init+0x104>)
 8000a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <MX_ADC1_Init+0x104>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <MX_ADC1_Init+0x104>)
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
	;
	gpioInit.Pin = GPIO_PIN_13;
 8000a62:	2108      	movs	r1, #8
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0192      	lsls	r2, r2, #6
 8000a6a:	601a      	str	r2, [r3, #0]
	gpioInit.Mode = GPIO_MODE_ANALOG;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	605a      	str	r2, [r3, #4]
	gpioInit.Pull = GPIO_NOPULL;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &gpioInit);
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <MX_ADC1_Init+0x108>)
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	0010      	movs	r0, r2
 8000a80:	f001 f8a2 	bl	8001bc8 <HAL_GPIO_Init>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000a86:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <MX_ADC1_Init+0x110>)
 8000a88:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	05d2      	lsls	r2, r2, #23
 8000a90:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000ad0:	222c      	movs	r2, #44	; 0x2c
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000aea:	223c      	movs	r2, #60	; 0x3c
 8000aec:	2100      	movs	r1, #0
 8000aee:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 fb3b 	bl	8001174 <HAL_ADC_Init>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0xd2>
		Error_Handler();
 8000b02:	f000 f887 	bl	8000c14 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000b06:	211c      	movs	r1, #28
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <MX_ADC1_Init+0x114>)
 8000b0c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_ADC1_Init+0x10c>)
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fd49 	bl	80015b8 <HAL_ADC_ConfigChannel>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0xfa>
		Error_Handler();
 8000b2a:	f000 f873 	bl	8000c14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b00a      	add	sp, #40	; 0x28
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	50000800 	.word	0x50000800
 8000b40:	20000044 	.word	0x20000044
 8000b44:	40012400 	.word	0x40012400
 8000b48:	34002000 	.word	0x34002000

08000b4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b52:	240c      	movs	r4, #12
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	0018      	movs	r0, r3
 8000b58:	2314      	movs	r3, #20
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f001 fe2f 	bl	80027c0 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_GPIO_Init+0xbc>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_BLUE_GPIO_Port, LED_1_BLUE_Pin, GPIO_PIN_RESET);
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_GPIO_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	2180      	movs	r1, #128	; 0x80
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 f99c 	bl	8001ed6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin,
 8000b9e:	491c      	ldr	r1, [pc, #112]	; (8000c10 <MX_GPIO_Init+0xc4>)
 8000ba0:	23a0      	movs	r3, #160	; 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 f995 	bl	8001ed6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_1_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_1_BLUE_Pin;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2201      	movs	r2, #1
 8000bbc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <MX_GPIO_Init+0xc0>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f000 fffc 	bl	8001bc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_2_YELLOW_Pin LED_3_GREEN_Pin LED_4_RED_Pin */
	GPIO_InitStruct.Pin = LED_2_YELLOW_Pin | LED_3_GREEN_Pin | LED_4_RED_Pin;
 8000bd0:	0021      	movs	r1, r4
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <MX_GPIO_Init+0xc4>)
 8000bd6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2201      	movs	r2, #1
 8000bdc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2201      	movs	r2, #1
 8000be2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	187a      	adds	r2, r7, r1
 8000bec:	23a0      	movs	r3, #160	; 0xa0
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	0011      	movs	r1, r2
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 ffe8 	bl	8001bc8 <HAL_GPIO_Init>

	/**/
	HAL_SYSCFG_SetPinBinding(
 8000bf8:	2014      	movs	r0, #20
 8000bfa:	f000 f98b 	bl	8000f14 <HAL_SYSCFG_SetPinBinding>
	HAL_BIND_SO8_PIN1_PB7 | HAL_BIND_SO8_PIN4_PA0 | HAL_BIND_SO8_PIN5_PA11);

}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b009      	add	sp, #36	; 0x24
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	50000400 	.word	0x50000400
 8000c10:	00001801 	.word	0x00001801

08000c14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x44>)
 8000c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x44>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x44>)
 8000c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_MspInit+0x44>)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	0549      	lsls	r1, r1, #21
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_MspInit+0x44>)
 8000c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	055b      	lsls	r3, r3, #21
 8000c54:	4013      	ands	r3, r2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b091      	sub	sp, #68	; 0x44
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	232c      	movs	r3, #44	; 0x2c
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	0018      	movs	r0, r3
 8000c76:	2314      	movs	r3, #20
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f001 fda0 	bl	80027c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	2410      	movs	r4, #16
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	0018      	movs	r0, r3
 8000c86:	231c      	movs	r3, #28
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f001 fd98 	bl	80027c0 <memset>
  if(hadc->Instance==ADC1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_ADC_MspInit+0xb0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d13a      	bne.n	8000d10 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	01d2      	lsls	r2, r2, #7
 8000ca0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	0018      	movs	r0, r3
 8000cac:	f001 fc76 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cb4:	f7ff ffae 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_ADC_MspInit+0xb4>)
 8000cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_ADC_MspInit+0xb4>)
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	0349      	lsls	r1, r1, #13
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_ADC_MspInit+0xb4>)
 8000cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	035b      	lsls	r3, r3, #13
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_ADC_MspInit+0xb4>)
 8000cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_ADC_MspInit+0xb4>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_ADC_MspInit+0xb4>)
 8000ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA13     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = RNG_Pin;
 8000cec:	212c      	movs	r1, #44	; 0x2c
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0192      	lsls	r2, r2, #6
 8000cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(RNG_GPIO_Port, &GPIO_InitStruct);
 8000d02:	187a      	adds	r2, r7, r1
 8000d04:	23a0      	movs	r3, #160	; 0xa0
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 ff5c 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b011      	add	sp, #68	; 0x44
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	40012400 	.word	0x40012400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f8aa 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <SystemInit+0x14>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	0512      	lsls	r2, r2, #20
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <LoopForever+0xe>)
  adds r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
  ldr r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d88:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8a:	3204      	adds	r2, #4

08000d8c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <LoopForever+0x16>)
  cmp r2, r3
 8000d8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d92:	f7ff ffdd 	bl	8000d50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d96:	f001 fcef 	bl	8002778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff fd75 	bl	8000888 <main>

08000d9e <LoopForever>:

LoopForever:
    b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   r0, =_estack
 8000da0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000da4:	08002830 	.word	0x08002830
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dac:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8000db0:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8000db4:	20000114 	.word	0x20000114

08000db8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_IRQHandler>
	...

08000dbc <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a combination of LL_PINMUX_xx defines
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->CFGR3, mux_cfg);
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <LL_SYSCFG_ConfigPinMux+0x18>)
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f80f 	bl	8000e08 <HAL_InitTick>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e001      	b.n	8000dfa <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df6:	f7ff ff13 	bl	8000c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	230f      	movs	r3, #15
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_InitTick+0x88>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02b      	beq.n	8000e78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_InitTick+0x8c>)
 8000e22:	681c      	ldr	r4, [r3, #0]
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_InitTick+0x88>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	0019      	movs	r1, r3
 8000e2a:	23fa      	movs	r3, #250	; 0xfa
 8000e2c:	0098      	lsls	r0, r3, #2
 8000e2e:	f7ff f96b 	bl	8000108 <__udivsi3>
 8000e32:	0003      	movs	r3, r0
 8000e34:	0019      	movs	r1, r3
 8000e36:	0020      	movs	r0, r4
 8000e38:	f7ff f966 	bl	8000108 <__udivsi3>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 feb5 	bl	8001bae <HAL_SYSTICK_Config>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d112      	bne.n	8000e6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d80a      	bhi.n	8000e64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fe94 	bl	8001b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_InitTick+0x90>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e00d      	b.n	8000e80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	e008      	b.n	8000e80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6e:	230f      	movs	r3, #15
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e003      	b.n	8000e80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e78:	230f      	movs	r3, #15
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	781b      	ldrb	r3, [r3, #0]
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	20000024 	.word	0x20000024
 8000e94:	2000001c 	.word	0x2000001c
 8000e98:	20000020 	.word	0x20000020

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_IncTick+0x18>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	18d2      	adds	r2, r2, r3
 8000eaa:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <HAL_IncTick+0x18>)
 8000eac:	601a      	str	r2, [r3, #0]
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000110 	.word	0x20000110
 8000eb8:	20000024 	.word	0x20000024

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <HAL_GetTick+0x10>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000110 	.word	0x20000110

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff fff0 	bl	8000ebc <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	d004      	beq.n	8000ef4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_Delay+0x40>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	f7ff ffe1 	bl	8000ebc <HAL_GetTick>
 8000efa:	0002      	movs	r2, r0
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d8f7      	bhi.n	8000ef6 <HAL_Delay+0x26>
  {
  }
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b004      	add	sp, #16
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000024 	.word	0x20000024

08000f14 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be any combination of HAL_BIND_xx defines
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff ff4c 	bl	8000dbc <LL_SYSCFG_ConfigPinMux>
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	ff3fffff 	.word	0xff3fffff

08000f54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	23c0      	movs	r3, #192	; 0xc0
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	4013      	ands	r3, r2
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	2104      	movs	r1, #4
 8000f82:	400a      	ands	r2, r1
 8000f84:	2107      	movs	r1, #7
 8000f86:	4091      	lsls	r1, r2
 8000f88:	000a      	movs	r2, r1
 8000f8a:	43d2      	mvns	r2, r2
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2104      	movs	r1, #4
 8000f92:	400b      	ands	r3, r1
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4099      	lsls	r1, r3
 8000f98:	000b      	movs	r3, r1
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	2104      	movs	r1, #4
 8000fba:	400a      	ands	r2, r1
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	4091      	lsls	r1, r2
 8000fc0:	000a      	movs	r2, r1
 8000fc2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fca:	40da      	lsrs	r2, r3
 8000fcc:	0013      	movs	r3, r2
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	211f      	movs	r1, #31
 8000fea:	400a      	ands	r2, r1
 8000fec:	210f      	movs	r1, #15
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	43d2      	mvns	r2, r2
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0e9b      	lsrs	r3, r3, #26
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	4019      	ands	r1, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	201f      	movs	r0, #31
 8001002:	4003      	ands	r3, r0
 8001004:	4099      	lsls	r1, r3
 8001006:	000b      	movs	r3, r1
 8001008:	431a      	orrs	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b004      	add	sp, #16
 8001014:	bd80      	pop	{r7, pc}

08001016 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	025b      	lsls	r3, r3, #9
 8001028:	0a5b      	lsrs	r3, r3, #9
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}

08001038 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	0252      	lsls	r2, r2, #9
 800104a:	0a52      	lsrs	r2, r2, #9
 800104c:	43d2      	mvns	r2, r2
 800104e:	401a      	ands	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}

0800105c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	0212      	lsls	r2, r2, #8
 8001070:	43d2      	mvns	r2, r2
 8001072:	401a      	ands	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	400b      	ands	r3, r1
 800107c:	4904      	ldr	r1, [pc, #16]	; (8001090 <LL_ADC_SetChannelSamplingTime+0x34>)
 800107e:	400b      	ands	r3, r1
 8001080:	431a      	orrs	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	7fffff00 	.word	0x7fffff00

08001094 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0552      	lsls	r2, r2, #21
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	6fffffe8 	.word	0x6fffffe8

080010bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	055b      	lsls	r3, r3, #21
 80010cc:	401a      	ands	r2, r3
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	055b      	lsls	r3, r3, #21
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d101      	bne.n	80010da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010da:	2300      	movs	r3, #0
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <LL_ADC_Enable+0x20>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	2201      	movs	r2, #1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}
 8001104:	7fffffe8 	.word	0x7fffffe8

08001108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2201      	movs	r2, #1
 8001116:	4013      	ands	r3, r2
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <LL_ADC_IsEnabled+0x18>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <LL_ADC_IsEnabled+0x1a>
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <LL_ADC_REG_StartConversion+0x20>)
 800113a:	4013      	ands	r3, r2
 800113c:	2204      	movs	r2, #4
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}
 800114c:	7fffffe8 	.word	0x7fffffe8

08001150 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2204      	movs	r2, #4
 800115e:	4013      	ands	r3, r2
 8001160:	2b04      	cmp	r3, #4
 8001162:	d101      	bne.n	8001168 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800117c:	231f      	movs	r3, #31
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e1a0      	b.n	80014dc <HAL_ADC_Init+0x368>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10a      	bne.n	80011b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fd5f 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2254      	movs	r2, #84	; 0x54
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff ff7d 	bl	80010bc <LL_ADC_IsInternalRegulatorEnabled>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d114      	bne.n	80011f0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff ff62 	bl	8001094 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80011d0:	4bc4      	ldr	r3, [pc, #784]	; (80014e4 <HAL_ADC_Init+0x370>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	49c4      	ldr	r1, [pc, #784]	; (80014e8 <HAL_ADC_Init+0x374>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7fe ff96 	bl	8000108 <__udivsi3>
 80011dc:	0003      	movs	r3, r0
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e2:	e002      	b.n	80011ea <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f9      	bne.n	80011e4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ff61 	bl	80010bc <LL_ADC_IsInternalRegulatorEnabled>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d10f      	bne.n	800121e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	2210      	movs	r2, #16
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	2201      	movs	r2, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001216:	231f      	movs	r3, #31
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff ff94 	bl	8001150 <LL_ADC_REG_IsConversionOngoing>
 8001228:	0003      	movs	r3, r0
 800122a:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	2210      	movs	r2, #16
 8001232:	4013      	ands	r3, r2
 8001234:	d000      	beq.n	8001238 <HAL_ADC_Init+0xc4>
 8001236:	e144      	b.n	80014c2 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <HAL_ADC_Init+0xcc>
 800123e:	e140      	b.n	80014c2 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	4aa9      	ldr	r2, [pc, #676]	; (80014ec <HAL_ADC_Init+0x378>)
 8001246:	4013      	ands	r3, r2
 8001248:	2202      	movs	r2, #2
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff57 	bl	8001108 <LL_ADC_IsEnabled>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d000      	beq.n	8001260 <HAL_ADC_Init+0xec>
 800125e:	e0ad      	b.n	80013bc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7e1b      	ldrb	r3, [r3, #24]
 8001268:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800126a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7e5b      	ldrb	r3, [r3, #25]
 8001270:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001272:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7e9b      	ldrb	r3, [r3, #26]
 8001278:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800127a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_ADC_Init+0x116>
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	e000      	b.n	800128c <HAL_ADC_Init+0x118>
 800128a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800128c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001292:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	da04      	bge.n	80012a6 <HAL_ADC_Init+0x132>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	085b      	lsrs	r3, r3, #1
 80012a4:	e001      	b.n	80012aa <HAL_ADC_Init+0x136>
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80012aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	212c      	movs	r1, #44	; 0x2c
 80012b0:	5c5b      	ldrb	r3, [r3, r1]
 80012b2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012b4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2220      	movs	r2, #32
 80012c0:	5c9b      	ldrb	r3, [r3, r2]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d115      	bne.n	80012f2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7e9b      	ldrb	r3, [r3, #26]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d105      	bne.n	80012da <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	0252      	lsls	r2, r2, #9
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	e00b      	b.n	80012f2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	2220      	movs	r2, #32
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2201      	movs	r2, #1
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fe:	23e0      	movs	r3, #224	; 0xe0
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001308:	4313      	orrs	r3, r2
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	4a76      	ldr	r2, [pc, #472]	; (80014f0 <HAL_ADC_Init+0x37c>)
 8001318:	4013      	ands	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	430a      	orrs	r2, r1
 8001324:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	0f9b      	lsrs	r3, r3, #30
 800132c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001332:	4313      	orrs	r3, r2
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4313      	orrs	r3, r2
 8001338:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	223c      	movs	r2, #60	; 0x3c
 800133e:	5c9b      	ldrb	r3, [r3, r2]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d111      	bne.n	8001368 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	0f9b      	lsrs	r3, r3, #30
 800134a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001350:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001356:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800135c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	2201      	movs	r2, #1
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	4a61      	ldr	r2, [pc, #388]	; (80014f4 <HAL_ADC_Init+0x380>)
 8001370:	4013      	ands	r3, r2
 8001372:	0019      	movs	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	430a      	orrs	r2, r1
 800137c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	061b      	lsls	r3, r3, #24
 8001386:	429a      	cmp	r2, r3
 8001388:	d018      	beq.n	80013bc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	429a      	cmp	r2, r3
 8001394:	d012      	beq.n	80013bc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	429a      	cmp	r2, r3
 80013a0:	d00c      	beq.n	80013bc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013a2:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <HAL_ADC_Init+0x384>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a55      	ldr	r2, [pc, #340]	; (80014fc <HAL_ADC_Init+0x388>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	23f0      	movs	r3, #240	; 0xf0
 80013b2:	039b      	lsls	r3, r3, #14
 80013b4:	401a      	ands	r2, r3
 80013b6:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <HAL_ADC_Init+0x384>)
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	001a      	movs	r2, r3
 80013c6:	2100      	movs	r1, #0
 80013c8:	f7ff fdd1 	bl	8000f6e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	494a      	ldr	r1, [pc, #296]	; (8001500 <HAL_ADC_Init+0x38c>)
 80013d6:	001a      	movs	r2, r3
 80013d8:	f7ff fdc9 	bl	8000f6e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2110      	movs	r1, #16
 80013f0:	4249      	negs	r1, r1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
 80013f6:	e03a      	b.n	800146e <HAL_ADC_Init+0x2fa>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	039b      	lsls	r3, r3, #14
 8001400:	429a      	cmp	r2, r3
 8001402:	d134      	bne.n	800146e <HAL_ADC_Init+0x2fa>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	e00c      	b.n	8001424 <HAL_ADC_Init+0x2b0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	40da      	lsrs	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	220f      	movs	r2, #15
 8001418:	4013      	ands	r3, r2
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d006      	beq.n	800142c <HAL_ADC_Init+0x2b8>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	3301      	adds	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b07      	cmp	r3, #7
 8001428:	d9ef      	bls.n	800140a <HAL_ADC_Init+0x296>
 800142a:	e000      	b.n	800142e <HAL_ADC_Init+0x2ba>
            ADC_CHSELR_SQ1)
        {
          break;
 800142c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d109      	bne.n	8001448 <HAL_ADC_Init+0x2d4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2110      	movs	r1, #16
 8001440:	4249      	negs	r1, r1
 8001442:	430a      	orrs	r2, r1
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
 8001446:	e012      	b.n	800146e <HAL_ADC_Init+0x2fa>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	3b01      	subs	r3, #1
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	221c      	movs	r2, #28
 8001458:	4013      	ands	r3, r2
 800145a:	2210      	movs	r2, #16
 800145c:	4252      	negs	r2, r2
 800145e:	409a      	lsls	r2, r3
 8001460:	0011      	movs	r1, r2
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2100      	movs	r1, #0
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fd97 	bl	8000fa8 <LL_ADC_GetSamplingTimeCommonChannels>
 800147a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001480:	429a      	cmp	r2, r3
 8001482:	d10b      	bne.n	800149c <HAL_ADC_Init+0x328>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	2203      	movs	r2, #3
 8001490:	4393      	bics	r3, r2
 8001492:	2201      	movs	r2, #1
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800149a:	e01c      	b.n	80014d6 <HAL_ADC_Init+0x362>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	2212      	movs	r2, #18
 80014a2:	4393      	bics	r3, r2
 80014a4:	2210      	movs	r2, #16
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	2201      	movs	r2, #1
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80014b8:	231f      	movs	r3, #31
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014c0:	e009      	b.n	80014d6 <HAL_ADC_Init+0x362>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	2210      	movs	r2, #16
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014ce:	231f      	movs	r3, #31
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80014d6:	231f      	movs	r3, #31
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	781b      	ldrb	r3, [r3, #0]
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b008      	add	sp, #32
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000001c 	.word	0x2000001c
 80014e8:	00030d40 	.word	0x00030d40
 80014ec:	fffffefd 	.word	0xfffffefd
 80014f0:	fffe0201 	.word	0xfffe0201
 80014f4:	1ffffc02 	.word	0x1ffffc02
 80014f8:	40012708 	.word	0x40012708
 80014fc:	ffc3ffff 	.word	0xffc3ffff
 8001500:	7fffff04 	.word	0x7fffff04

08001504 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fe1d 	bl	8001150 <LL_ADC_REG_IsConversionOngoing>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d135      	bne.n	8001586 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2254      	movs	r2, #84	; 0x54
 800151e:	5c9b      	ldrb	r3, [r3, r2]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_Start+0x24>
 8001524:	2302      	movs	r3, #2
 8001526:	e035      	b.n	8001594 <HAL_ADC_Start+0x90>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2254      	movs	r2, #84	; 0x54
 800152c:	2101      	movs	r1, #1
 800152e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001530:	250f      	movs	r5, #15
 8001532:	197c      	adds	r4, r7, r5
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0018      	movs	r0, r3
 8001538:	f000 fa14 	bl	8001964 <ADC_Enable>
 800153c:	0003      	movs	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001540:	197b      	adds	r3, r7, r5
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d119      	bne.n	800157c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_ADC_Start+0x98>)
 800154e:	4013      	ands	r3, r2
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	0052      	lsls	r2, r2, #1
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	221c      	movs	r2, #28
 8001566:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2254      	movs	r2, #84	; 0x54
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fdd9 	bl	800112c <LL_ADC_REG_StartConversion>
 800157a:	e008      	b.n	800158e <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2254      	movs	r2, #84	; 0x54
 8001580:	2100      	movs	r1, #0
 8001582:	5499      	strb	r1, [r3, r2]
 8001584:	e003      	b.n	800158e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001586:	230f      	movs	r3, #15
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2202      	movs	r2, #2
 800158c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bdb0      	pop	{r4, r5, r7, pc}
 800159c:	fffff0fe 	.word	0xfffff0fe

080015a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c2:	2317      	movs	r3, #23
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2254      	movs	r2, #84	; 0x54
 80015d2:	5c9b      	ldrb	r3, [r3, r2]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x24>
 80015d8:	2302      	movs	r3, #2
 80015da:	e1be      	b.n	800195a <HAL_ADC_ConfigChannel+0x3a2>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2254      	movs	r2, #84	; 0x54
 80015e0:	2101      	movs	r1, #1
 80015e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fdb1 	bl	8001150 <LL_ADC_REG_IsConversionOngoing>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d000      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x3c>
 80015f2:	e1a1      	b.n	8001938 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d100      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x46>
 80015fc:	e152      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	429a      	cmp	r2, r3
 8001608:	d004      	beq.n	8001614 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800160e:	4ac2      	ldr	r2, [pc, #776]	; (8001918 <HAL_ADC_ConfigChannel+0x360>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d108      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0019      	movs	r1, r3
 800161e:	0010      	movs	r0, r2
 8001620:	f7ff fcf9 	bl	8001016 <LL_ADC_REG_SetSequencerChAdd>
 8001624:	e0ed      	b.n	8001802 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	211f      	movs	r1, #31
 8001630:	400b      	ands	r3, r1
 8001632:	210f      	movs	r1, #15
 8001634:	4099      	lsls	r1, r3
 8001636:	000b      	movs	r3, r1
 8001638:	43db      	mvns	r3, r3
 800163a:	4013      	ands	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	0a5b      	lsrs	r3, r3, #9
 8001646:	d105      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x9c>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0e9b      	lsrs	r3, r3, #26
 800164e:	221f      	movs	r2, #31
 8001650:	4013      	ands	r3, r2
 8001652:	e0bc      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	d000      	beq.n	8001660 <HAL_ADC_ConfigChannel+0xa8>
 800165e:	e0b5      	b.n	80017cc <HAL_ADC_ConfigChannel+0x214>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d000      	beq.n	800166c <HAL_ADC_ConfigChannel+0xb4>
 800166a:	e0ad      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x210>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2204      	movs	r2, #4
 8001672:	4013      	ands	r3, r2
 8001674:	d000      	beq.n	8001678 <HAL_ADC_ConfigChannel+0xc0>
 8001676:	e0a5      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x20c>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2208      	movs	r2, #8
 800167e:	4013      	ands	r3, r2
 8001680:	d000      	beq.n	8001684 <HAL_ADC_ConfigChannel+0xcc>
 8001682:	e09d      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x208>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2210      	movs	r2, #16
 800168a:	4013      	ands	r3, r2
 800168c:	d000      	beq.n	8001690 <HAL_ADC_ConfigChannel+0xd8>
 800168e:	e095      	b.n	80017bc <HAL_ADC_ConfigChannel+0x204>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2220      	movs	r2, #32
 8001696:	4013      	ands	r3, r2
 8001698:	d000      	beq.n	800169c <HAL_ADC_ConfigChannel+0xe4>
 800169a:	e08d      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x200>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2240      	movs	r2, #64	; 0x40
 80016a2:	4013      	ands	r3, r2
 80016a4:	d000      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0xf0>
 80016a6:	e085      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x1fc>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	4013      	ands	r3, r2
 80016b0:	d000      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0xfc>
 80016b2:	e07d      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x1f8>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4013      	ands	r3, r2
 80016be:	d000      	beq.n	80016c2 <HAL_ADC_ConfigChannel+0x10a>
 80016c0:	e074      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1f4>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d000      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0x118>
 80016ce:	e06b      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x1f0>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4013      	ands	r3, r2
 80016da:	d000      	beq.n	80016de <HAL_ADC_ConfigChannel+0x126>
 80016dc:	e062      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1ec>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4013      	ands	r3, r2
 80016e8:	d000      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x134>
 80016ea:	e059      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x1e8>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	015b      	lsls	r3, r3, #5
 80016f4:	4013      	ands	r3, r2
 80016f6:	d151      	bne.n	800179c <HAL_ADC_ConfigChannel+0x1e4>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	019b      	lsls	r3, r3, #6
 8001700:	4013      	ands	r3, r2
 8001702:	d149      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1e0>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	01db      	lsls	r3, r3, #7
 800170c:	4013      	ands	r3, r2
 800170e:	d141      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1dc>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	4013      	ands	r3, r2
 800171a:	d139      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1d8>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	4013      	ands	r3, r2
 8001726:	d131      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1d4>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4013      	ands	r3, r2
 8001732:	d129      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	02db      	lsls	r3, r3, #11
 800173c:	4013      	ands	r3, r2
 800173e:	d121      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1cc>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	4013      	ands	r3, r2
 800174a:	d119      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1c8>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	035b      	lsls	r3, r3, #13
 8001754:	4013      	ands	r3, r2
 8001756:	d111      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1c4>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	4013      	ands	r3, r2
 8001762:	d109      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1c0>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	03db      	lsls	r3, r3, #15
 800176c:	4013      	ands	r3, r2
 800176e:	d001      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x1bc>
 8001770:	2316      	movs	r3, #22
 8001772:	e02c      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001774:	2300      	movs	r3, #0
 8001776:	e02a      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001778:	2315      	movs	r3, #21
 800177a:	e028      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 800177c:	2314      	movs	r3, #20
 800177e:	e026      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001780:	2313      	movs	r3, #19
 8001782:	e024      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001784:	2312      	movs	r3, #18
 8001786:	e022      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001788:	2311      	movs	r3, #17
 800178a:	e020      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 800178c:	2310      	movs	r3, #16
 800178e:	e01e      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001790:	230f      	movs	r3, #15
 8001792:	e01c      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001794:	230e      	movs	r3, #14
 8001796:	e01a      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 8001798:	230d      	movs	r3, #13
 800179a:	e018      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 800179c:	230c      	movs	r3, #12
 800179e:	e016      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017a0:	230b      	movs	r3, #11
 80017a2:	e014      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017a4:	230a      	movs	r3, #10
 80017a6:	e012      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017a8:	2309      	movs	r3, #9
 80017aa:	e010      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017ac:	2308      	movs	r3, #8
 80017ae:	e00e      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017b0:	2307      	movs	r3, #7
 80017b2:	e00c      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017b4:	2306      	movs	r3, #6
 80017b6:	e00a      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017b8:	2305      	movs	r3, #5
 80017ba:	e008      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017bc:	2304      	movs	r3, #4
 80017be:	e006      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e004      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_ADC_ConfigChannel+0x216>
 80017cc:	2300      	movs	r3, #0
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	6852      	ldr	r2, [r2, #4]
 80017d2:	201f      	movs	r0, #31
 80017d4:	4002      	ands	r2, r0
 80017d6:	4093      	lsls	r3, r2
 80017d8:	000a      	movs	r2, r1
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d808      	bhi.n	8001802 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	001a      	movs	r2, r3
 80017fe:	f7ff fbea 	bl	8000fd6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6819      	ldr	r1, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	001a      	movs	r2, r3
 8001810:	f7ff fc24 	bl	800105c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db00      	blt.n	800181e <HAL_ADC_ConfigChannel+0x266>
 800181c:	e096      	b.n	800194c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_ADC_ConfigChannel+0x364>)
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fb97 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 8001826:	0003      	movs	r3, r0
 8001828:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <HAL_ADC_ConfigChannel+0x368>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d123      	bne.n	800187c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800183c:	d11e      	bne.n	800187c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	4313      	orrs	r3, r2
 8001846:	4a35      	ldr	r2, [pc, #212]	; (800191c <HAL_ADC_ConfigChannel+0x364>)
 8001848:	0019      	movs	r1, r3
 800184a:	0010      	movs	r0, r2
 800184c:	f7ff fb6e 	bl	8000f2c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001850:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_ADC_ConfigChannel+0x36c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4934      	ldr	r1, [pc, #208]	; (8001928 <HAL_ADC_ConfigChannel+0x370>)
 8001856:	0018      	movs	r0, r3
 8001858:	f7fe fc56 	bl	8000108 <__udivsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	001a      	movs	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	189b      	adds	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	3301      	adds	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800186c:	e002      	b.n	8001874 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800187a:	e067      	b.n	800194c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2a      	ldr	r2, [pc, #168]	; (800192c <HAL_ADC_ConfigChannel+0x374>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d162      	bne.n	800194c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	03db      	lsls	r3, r3, #15
 800188c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800188e:	d15d      	bne.n	800194c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	03d2      	lsls	r2, r2, #15
 8001896:	4313      	orrs	r3, r2
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <HAL_ADC_ConfigChannel+0x364>)
 800189a:	0019      	movs	r1, r3
 800189c:	0010      	movs	r0, r2
 800189e:	f7ff fb45 	bl	8000f2c <LL_ADC_SetCommonPathInternalCh>
 80018a2:	e053      	b.n	800194c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_ADC_ConfigChannel+0x360>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d107      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0019      	movs	r1, r3
 80018c4:	0010      	movs	r0, r2
 80018c6:	f7ff fbb7 	bl	8001038 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da3c      	bge.n	800194c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_ADC_ConfigChannel+0x364>)
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff fb3d 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_ADC_ConfigChannel+0x368>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d108      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_ADC_ConfigChannel+0x378>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_ADC_ConfigChannel+0x364>)
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	f7ff fb1a 	bl	8000f2c <LL_ADC_SetCommonPathInternalCh>
 80018f8:	e028      	b.n	800194c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_ADC_ConfigChannel+0x374>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d123      	bne.n	800194c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_ADC_ConfigChannel+0x37c>)
 8001908:	4013      	ands	r3, r2
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_ADC_ConfigChannel+0x364>)
 800190c:	0019      	movs	r1, r3
 800190e:	0010      	movs	r0, r2
 8001910:	f7ff fb0c 	bl	8000f2c <LL_ADC_SetCommonPathInternalCh>
 8001914:	e01a      	b.n	800194c <HAL_ADC_ConfigChannel+0x394>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	80000004 	.word	0x80000004
 800191c:	40012708 	.word	0x40012708
 8001920:	a4000200 	.word	0xa4000200
 8001924:	2000001c 	.word	0x2000001c
 8001928:	00030d40 	.word	0x00030d40
 800192c:	a8000400 	.word	0xa8000400
 8001930:	ff7fffff 	.word	0xff7fffff
 8001934:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	2220      	movs	r2, #32
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001944:	2317      	movs	r3, #23
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2254      	movs	r2, #84	; 0x54
 8001950:	2100      	movs	r1, #0
 8001952:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001954:	2317      	movs	r3, #23
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	781b      	ldrb	r3, [r3, #0]
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b006      	add	sp, #24
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)

08001964 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fbc7 	bl	8001108 <LL_ADC_IsEnabled>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d162      	bne.n	8001a44 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <ADC_Enable+0xec>)
 8001986:	4013      	ands	r3, r2
 8001988:	d00d      	beq.n	80019a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	2210      	movs	r2, #16
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2201      	movs	r2, #1
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e04f      	b.n	8001a46 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff fb9a 	bl	80010e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <ADC_Enable+0xf0>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff face 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 80019b8:	0002      	movs	r2, r0
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	4013      	ands	r3, r2
 80019c0:	d00f      	beq.n	80019e2 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <ADC_Enable+0xf4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4925      	ldr	r1, [pc, #148]	; (8001a5c <ADC_Enable+0xf8>)
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7fe fb9d 	bl	8000108 <__udivsi3>
 80019ce:	0003      	movs	r3, r0
 80019d0:	3301      	adds	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80019d4:	e002      	b.n	80019dc <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e5b      	ldrb	r3, [r3, #25]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d02c      	beq.n	8001a44 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fa67 	bl	8000ebc <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019f2:	e020      	b.n	8001a36 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff fb85 	bl	8001108 <LL_ADC_IsEnabled>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d104      	bne.n	8001a0c <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7ff fb6c 	bl	80010e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a0c:	f7ff fa56 	bl	8000ebc <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d90d      	bls.n	8001a36 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	2210      	movs	r2, #16
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e007      	b.n	8001a46 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d1d7      	bne.n	80019f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	80000017 	.word	0x80000017
 8001a54:	40012708 	.word	0x40012708
 8001a58:	2000001c 	.word	0x2000001c
 8001a5c:	00030d40 	.word	0x00030d40

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	0002      	movs	r2, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b7f      	cmp	r3, #127	; 0x7f
 8001a74:	d828      	bhi.n	8001ac8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <__NVIC_SetPriority+0xd4>)
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	33c0      	adds	r3, #192	; 0xc0
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	589b      	ldr	r3, [r3, r2]
 8001a86:	1dfa      	adds	r2, r7, #7
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	400a      	ands	r2, r1
 8001a90:	00d2      	lsls	r2, r2, #3
 8001a92:	21ff      	movs	r1, #255	; 0xff
 8001a94:	4091      	lsls	r1, r2
 8001a96:	000a      	movs	r2, r1
 8001a98:	43d2      	mvns	r2, r2
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	22ff      	movs	r2, #255	; 0xff
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	2303      	movs	r3, #3
 8001aae:	4003      	ands	r3, r0
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab4:	481f      	ldr	r0, [pc, #124]	; (8001b34 <__NVIC_SetPriority+0xd4>)
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	33c0      	adds	r3, #192	; 0xc0
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ac6:	e031      	b.n	8001b2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <__NVIC_SetPriority+0xd8>)
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	0019      	movs	r1, r3
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	3b08      	subs	r3, #8
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3306      	adds	r3, #6
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	18d3      	adds	r3, r2, r3
 8001ade:	3304      	adds	r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	1dfa      	adds	r2, r7, #7
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	2203      	movs	r2, #3
 8001aea:	400a      	ands	r2, r1
 8001aec:	00d2      	lsls	r2, r2, #3
 8001aee:	21ff      	movs	r1, #255	; 0xff
 8001af0:	4091      	lsls	r1, r2
 8001af2:	000a      	movs	r2, r1
 8001af4:	43d2      	mvns	r2, r2
 8001af6:	401a      	ands	r2, r3
 8001af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	22ff      	movs	r2, #255	; 0xff
 8001b00:	401a      	ands	r2, r3
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	0018      	movs	r0, r3
 8001b08:	2303      	movs	r3, #3
 8001b0a:	4003      	ands	r3, r0
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b10:	4809      	ldr	r0, [pc, #36]	; (8001b38 <__NVIC_SetPriority+0xd8>)
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	001c      	movs	r4, r3
 8001b18:	230f      	movs	r3, #15
 8001b1a:	4023      	ands	r3, r4
 8001b1c:	3b08      	subs	r3, #8
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	430a      	orrs	r2, r1
 8001b22:	3306      	adds	r3, #6
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	18c3      	adds	r3, r0, r3
 8001b28:	3304      	adds	r3, #4
 8001b2a:	601a      	str	r2, [r3, #0]
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b003      	add	sp, #12
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	045b      	lsls	r3, r3, #17
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d301      	bcc.n	8001b54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b50:	2301      	movs	r3, #1
 8001b52:	e010      	b.n	8001b76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <SysTick_Config+0x44>)
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	425b      	negs	r3, r3
 8001b60:	2103      	movs	r1, #3
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff ff7c 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x44>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x44>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	210f      	movs	r1, #15
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	1c02      	adds	r2, r0, #0
 8001b94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff ffbf 	bl	8001b3c <SysTick_Config>
 8001bbe:	0003      	movs	r3, r0
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bd6:	e14d      	b.n	8001e74 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4091      	lsls	r1, r2
 8001be2:	000a      	movs	r2, r1
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d100      	bne.n	8001bf0 <HAL_GPIO_Init+0x28>
 8001bee:	e13e      	b.n	8001e6e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x38>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b12      	cmp	r3, #18
 8001bfe:	d125      	bne.n	8001c4c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	58d3      	ldr	r3, [r2, r3]
 8001c0c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2207      	movs	r2, #7
 8001c12:	4013      	ands	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	220f      	movs	r2, #15
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2107      	movs	r1, #7
 8001c30:	400b      	ands	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	0013      	movs	r3, r2
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	409a      	lsls	r2, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d00b      	beq.n	8001ca0 <HAL_GPIO_Init+0xd8>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d007      	beq.n	8001ca0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c94:	2b11      	cmp	r3, #17
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b12      	cmp	r3, #18
 8001c9e:	d130      	bne.n	8001d02 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	409a      	lsls	r2, r3
 8001cae:	0013      	movs	r3, r2
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	2201      	movs	r2, #1
 8001cee:	401a      	ands	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d017      	beq.n	8001d3a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4013      	ands	r3, r2
 8001d44:	d100      	bne.n	8001d48 <HAL_GPIO_Init+0x180>
 8001d46:	e092      	b.n	8001e6e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d48:	4a50      	ldr	r2, [pc, #320]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3318      	adds	r3, #24
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	589b      	ldr	r3, [r3, r2]
 8001d54:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	220f      	movs	r2, #15
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0013      	movs	r3, r2
 8001d64:	43da      	mvns	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	23a0      	movs	r3, #160	; 0xa0
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x1d6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a45      	ldr	r2, [pc, #276]	; (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x1d2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a44      	ldr	r2, [pc, #272]	; (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x1ce>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x1ca>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x1d8>
 8001d92:	2305      	movs	r3, #5
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x1d8>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x1d8>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x1d8>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	2103      	movs	r1, #3
 8001da4:	400a      	ands	r2, r1
 8001da6:	00d2      	lsls	r2, r2, #3
 8001da8:	4093      	lsls	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001db0:	4936      	ldr	r1, [pc, #216]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3318      	adds	r3, #24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001dbe:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	58d3      	ldr	r3, [r2, r3]
 8001dc4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	025b      	lsls	r3, r3, #9
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001de4:	4929      	ldr	r1, [pc, #164]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001dee:	2384      	movs	r3, #132	; 0x84
 8001df0:	58d3      	ldr	r3, [r2, r3]
 8001df2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	029b      	lsls	r3, r3, #10
 8001e06:	4013      	ands	r3, r2
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e12:	491e      	ldr	r1, [pc, #120]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001e14:	2284      	movs	r2, #132	; 0x84
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43da      	mvns	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	4013      	ands	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	035b      	lsls	r3, r3, #13
 8001e32:	4013      	ands	r3, r2
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4013      	ands	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	039b      	lsls	r3, r3, #14
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	3301      	adds	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	40da      	lsrs	r2, r3
 8001e7c:	1e13      	subs	r3, r2, #0
 8001e7e:	d000      	beq.n	8001e82 <HAL_GPIO_Init+0x2ba>
 8001e80:	e6aa      	b.n	8001bd8 <HAL_GPIO_Init+0x10>
  }
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b006      	add	sp, #24
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	50000400 	.word	0x50000400
 8001e94:	50000800 	.word	0x50000800
 8001e98:	50001400 	.word	0x50001400

08001e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	1cbb      	adds	r3, r7, #2
 8001ea8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	1cba      	adds	r2, r7, #2
 8001eb0:	8812      	ldrh	r2, [r2, #0]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ec8:	230f      	movs	r3, #15
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	0008      	movs	r0, r1
 8001ee0:	0011      	movs	r1, r2
 8001ee2:	1cbb      	adds	r3, r7, #2
 8001ee4:	1c02      	adds	r2, r0, #0
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	1c7b      	adds	r3, r7, #1
 8001eea:	1c0a      	adds	r2, r1, #0
 8001eec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eee:	1c7b      	adds	r3, r7, #1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ef6:	1cbb      	adds	r3, r7, #2
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001efe:	e003      	b.n	8001f08 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f00:	1cbb      	adds	r3, r7, #2
 8001f02:	881a      	ldrh	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1e5      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1e>
 8001f2c:	e06f      	b.n	800200e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4bc4      	ldr	r3, [pc, #784]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2238      	movs	r2, #56	; 0x38
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4bc0      	ldr	r3, [pc, #768]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	029b      	lsls	r3, r3, #10
 8001f46:	4013      	ands	r3, r2
 8001f48:	d061      	beq.n	800200e <HAL_RCC_OscConfig+0xfe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d15d      	bne.n	800200e <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1cb      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	025b      	lsls	r3, r3, #9
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62>
 8001f62:	4bb7      	ldr	r3, [pc, #732]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4bb6      	ldr	r3, [pc, #728]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0249      	lsls	r1, r1, #9
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e020      	b.n	8001fb4 <HAL_RCC_OscConfig+0xa4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	23a0      	movs	r3, #160	; 0xa0
 8001f78:	02db      	lsls	r3, r3, #11
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d10e      	bne.n	8001f9c <HAL_RCC_OscConfig+0x8c>
 8001f7e:	4bb0      	ldr	r3, [pc, #704]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4baf      	ldr	r3, [pc, #700]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	02c9      	lsls	r1, r1, #11
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	4bac      	ldr	r3, [pc, #688]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4bab      	ldr	r3, [pc, #684]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0249      	lsls	r1, r1, #9
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xa4>
 8001f9c:	4ba8      	ldr	r3, [pc, #672]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4ba7      	ldr	r3, [pc, #668]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001fa2:	49a8      	ldr	r1, [pc, #672]	; (8002244 <HAL_RCC_OscConfig+0x334>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	4ba5      	ldr	r3, [pc, #660]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4ba4      	ldr	r3, [pc, #656]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001fae:	49a6      	ldr	r1, [pc, #664]	; (8002248 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d014      	beq.n	8001fe6 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ff7e 	bl	8000ebc <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc6:	f7fe ff79 	bl	8000ebc <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e18a      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd8:	4b99      	ldr	r3, [pc, #612]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0xb6>
 8001fe4:	e013      	b.n	800200e <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ff69 	bl	8000ebc <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe ff64 	bl	8000ebc <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e175      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002002:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	4013      	ands	r3, r2
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_RCC_OscConfig+0x10a>
 8002018:	e08c      	b.n	8002134 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2238      	movs	r2, #56	; 0x38
 8002020:	4013      	ands	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d135      	bne.n	8002096 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4013      	ands	r3, r2
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x132>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e155      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a81      	ldr	r2, [pc, #516]	; (800224c <HAL_RCC_OscConfig+0x33c>)
 8002048:	4013      	ands	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	021a      	lsls	r2, r3, #8
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d112      	bne.n	8002084 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800205e:	4b78      	ldr	r3, [pc, #480]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7b      	ldr	r2, [pc, #492]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	4b74      	ldr	r3, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002072:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0adb      	lsrs	r3, r3, #11
 8002078:	2207      	movs	r2, #7
 800207a:	4013      	ands	r3, r2
 800207c:	4a75      	ldr	r2, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x344>)
 800207e:	40da      	lsrs	r2, r3
 8002080:	4b75      	ldr	r3, [pc, #468]	; (8002258 <HAL_RCC_OscConfig+0x348>)
 8002082:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x34c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0018      	movs	r0, r3
 800208a:	f7fe febd 	bl	8000e08 <HAL_InitTick>
 800208e:	1e03      	subs	r3, r0, #0
 8002090:	d050      	beq.n	8002134 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e12b      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d030      	beq.n	8002100 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800209e:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6b      	ldr	r2, [pc, #428]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	4b64      	ldr	r3, [pc, #400]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	0049      	lsls	r1, r1, #1
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe fefc 	bl	8000ebc <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7fe fef7 	bl	8000ebc <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e108      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4013      	ands	r3, r2
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a57      	ldr	r2, [pc, #348]	; (800224c <HAL_RCC_OscConfig+0x33c>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	021a      	lsls	r2, r3, #8
 80020f8:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	e019      	b.n	8002134 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002106:	4956      	ldr	r1, [pc, #344]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002108:	400a      	ands	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fed6 	bl	8000ebc <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7fe fed1 	bl	8000ebc <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0e2      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002128:	4b45      	ldr	r3, [pc, #276]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4013      	ands	r3, r2
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2208      	movs	r2, #8
 800213a:	4013      	ands	r3, r2
 800213c:	d047      	beq.n	80021ce <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2238      	movs	r2, #56	; 0x38
 8002144:	4013      	ands	r3, r2
 8002146:	2b18      	cmp	r3, #24
 8002148:	d10a      	bne.n	8002160 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x2be>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d138      	bne.n	80021ce <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0c6      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d019      	beq.n	800219c <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800216a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800216e:	2101      	movs	r1, #1
 8002170:	430a      	orrs	r2, r1
 8002172:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fea2 	bl	8000ebc <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217e:	f7fe fe9d 	bl	8000ebc <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0ae      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d0f1      	beq.n	800217e <HAL_RCC_OscConfig+0x26e>
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800219e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	438a      	bics	r2, r1
 80021a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe88 	bl	8000ebc <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b2:	f7fe fe83 	bl	8000ebc <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e094      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80021c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c8:	2202      	movs	r2, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	d1f1      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2204      	movs	r2, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	d100      	bne.n	80021da <HAL_RCC_OscConfig+0x2ca>
 80021d8:	e088      	b.n	80022ec <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	230f      	movs	r3, #15
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2238      	movs	r2, #56	; 0x38
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d100      	bne.n	80021fa <HAL_RCC_OscConfig+0x2ea>
 80021f8:	e078      	b.n	80022ec <HAL_RCC_OscConfig+0x3dc>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d000      	beq.n	8002204 <HAL_RCC_OscConfig+0x2f4>
 8002202:	e073      	b.n	80022ec <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e072      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x30e>
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002216:	2101      	movs	r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	65da      	str	r2, [r3, #92]	; 0x5c
 800221c:	e02e      	b.n	800227c <HAL_RCC_OscConfig+0x36c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d11e      	bne.n	8002264 <HAL_RCC_OscConfig+0x354>
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 800222c:	2104      	movs	r1, #4
 800222e:	430a      	orrs	r2, r1
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
 8002232:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002236:	4b02      	ldr	r3, [pc, #8]	; (8002240 <HAL_RCC_OscConfig+0x330>)
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	65da      	str	r2, [r3, #92]	; 0x5c
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0x36c>
 8002240:	40021000 	.word	0x40021000
 8002244:	fffeffff 	.word	0xfffeffff
 8002248:	fffbffff 	.word	0xfffbffff
 800224c:	ffff80ff 	.word	0xffff80ff
 8002250:	ffffc7ff 	.word	0xffffc7ff
 8002254:	02dc6c00 	.word	0x02dc6c00
 8002258:	2000001c 	.word	0x2000001c
 800225c:	20000020 	.word	0x20000020
 8002260:	fffffeff 	.word	0xfffffeff
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 8002266:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 8002272:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d014      	beq.n	80022ae <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fe1a 	bl	8000ebc <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800228c:	e009      	b.n	80022a2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe fe15 	bl	8000ebc <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a18      	ldr	r2, [pc, #96]	; (80022fc <HAL_RCC_OscConfig+0x3ec>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e025      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x37e>
 80022ac:	e013      	b.n	80022d6 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe fe05 	bl	8000ebc <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022b6:	e009      	b.n	80022cc <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7fe fe00 	bl	8000ebc <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_RCC_OscConfig+0x3ec>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e010      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022d6:	230f      	movs	r3, #15
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 80022e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_RCC_OscConfig+0x3e8>)
 80022e6:	4906      	ldr	r1, [pc, #24]	; (8002300 <HAL_RCC_OscConfig+0x3f0>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b006      	add	sp, #24
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	40021000 	.word	0x40021000
 80022fc:	00001388 	.word	0x00001388
 8002300:	efffffff 	.word	0xefffffff

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0e9      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2207      	movs	r2, #7
 800231e:	4013      	ands	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d91e      	bls.n	8002364 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2207      	movs	r2, #7
 800232c:	4393      	bics	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	4b70      	ldr	r3, [pc, #448]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002338:	f7fe fdc0 	bl	8000ebc <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002340:	e009      	b.n	8002356 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7fe fdbb 	bl	8000ebc <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x1f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0ca      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2207      	movs	r2, #7
 800235c:	4013      	ands	r3, r2
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d017      	beq.n	800239e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2204      	movs	r2, #4
 8002374:	4013      	ands	r3, r2
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002378:	4b60      	ldr	r3, [pc, #384]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a60      	ldr	r2, [pc, #384]	; (8002500 <HAL_RCC_ClockConfig+0x1fc>)
 800237e:	401a      	ands	r2, r3
 8002380:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002382:	21b0      	movs	r1, #176	; 0xb0
 8002384:	0109      	lsls	r1, r1, #4
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238a:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <HAL_RCC_ClockConfig+0x200>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	d055      	beq.n	8002454 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80023a8:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	221c      	movs	r2, #28
 80023ae:	4393      	bics	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c4:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	4013      	ands	r3, r2
 80023ce:	d11f      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e08b      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023dc:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4013      	ands	r3, r2
 80023e6:	d113      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e07f      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80023f4:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e074      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e06d      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2207      	movs	r2, #7
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fd4a 	bl	8000ebc <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242c:	e009      	b.n	8002442 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242e:	f7fe fd45 	bl	8000ebc <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <HAL_RCC_ClockConfig+0x1f4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e054      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2238      	movs	r2, #56	; 0x38
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	429a      	cmp	r2, r3
 8002452:	d1ec      	bne.n	800242e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2207      	movs	r2, #7
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d21e      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2207      	movs	r2, #7
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002474:	f7fe fd22 	bl	8000ebc <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe fd1d 	bl	8000ebc <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_RCC_ClockConfig+0x1f4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e02c      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2207      	movs	r2, #7
 8002498:	4013      	ands	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2204      	movs	r2, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a16      	ldr	r2, [pc, #88]	; (8002508 <HAL_RCC_ClockConfig+0x204>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024be:	f000 f82b 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024c2:	0001      	movs	r1, r0
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	220f      	movs	r2, #15
 80024cc:	401a      	ands	r2, r3
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCC_ClockConfig+0x208>)
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	58d3      	ldr	r3, [r2, r3]
 80024d4:	221f      	movs	r2, #31
 80024d6:	4013      	ands	r3, r2
 80024d8:	000a      	movs	r2, r1
 80024da:	40da      	lsrs	r2, r3
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_RCC_ClockConfig+0x20c>)
 80024de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_RCC_ClockConfig+0x210>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe fc8f 	bl	8000e08 <HAL_InitTick>
 80024ea:	0003      	movs	r3, r0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40022000 	.word	0x40022000
 80024f8:	00001388 	.word	0x00001388
 80024fc:	40021000 	.word	0x40021000
 8002500:	ffff84ff 	.word	0xffff84ff
 8002504:	fffff0ff 	.word	0xfffff0ff
 8002508:	ffff8fff 	.word	0xffff8fff
 800250c:	080027e8 	.word	0x080027e8
 8002510:	2000001c 	.word	0x2000001c
 8002514:	20000020 	.word	0x20000020

08002518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <HAL_RCC_GetSysClockFreq+0x78>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2238      	movs	r2, #56	; 0x38
 8002524:	4013      	ands	r3, r2
 8002526:	d10f      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_GetSysClockFreq+0x78>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0adb      	lsrs	r3, r3, #11
 800252e:	2207      	movs	r2, #7
 8002530:	4013      	ands	r3, r2
 8002532:	2201      	movs	r2, #1
 8002534:	409a      	lsls	r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	4815      	ldr	r0, [pc, #84]	; (8002594 <HAL_RCC_GetSysClockFreq+0x7c>)
 800253e:	f7fd fde3 	bl	8000108 <__udivsi3>
 8002542:	0003      	movs	r3, r0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	e01e      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCC_GetSysClockFreq+0x78>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2238      	movs	r2, #56	; 0x38
 800254e:	4013      	ands	r3, r2
 8002550:	2b08      	cmp	r3, #8
 8002552:	d102      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_GetSysClockFreq+0x80>)
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	e015      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_RCC_GetSysClockFreq+0x78>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2238      	movs	r2, #56	; 0x38
 8002560:	4013      	ands	r3, r2
 8002562:	2b20      	cmp	r3, #32
 8002564:	d103      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	e00b      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_RCC_GetSysClockFreq+0x78>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2238      	movs	r2, #56	; 0x38
 8002574:	4013      	ands	r3, r2
 8002576:	2b18      	cmp	r3, #24
 8002578:	d103      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800257a:	23fa      	movs	r3, #250	; 0xfa
 800257c:	01db      	lsls	r3, r3, #7
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	e001      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002586:	687b      	ldr	r3, [r7, #4]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	02dc6c00 	.word	0x02dc6c00
 8002598:	007a1200 	.word	0x007a1200

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025a4:	2313      	movs	r3, #19
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ac:	2312      	movs	r3, #18
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	4013      	ands	r3, r2
 80025be:	d100      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025c0:	e079      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2011      	movs	r0, #17
 80025c4:	183b      	adds	r3, r7, r0
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	055b      	lsls	r3, r3, #21
 80025d2:	4013      	ands	r3, r2
 80025d4:	d110      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025da:	4b60      	ldr	r3, [pc, #384]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0549      	lsls	r1, r1, #21
 80025e0:	430a      	orrs	r2, r1
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80025e4:	4b5d      	ldr	r3, [pc, #372]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	055b      	lsls	r3, r3, #21
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f2:	183b      	adds	r3, r7, r0
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80025f8:	4b58      	ldr	r3, [pc, #352]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025fc:	23c0      	movs	r3, #192	; 0xc0
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4013      	ands	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	d014      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002614:	4b51      	ldr	r3, [pc, #324]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	4a51      	ldr	r2, [pc, #324]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800261a:	4013      	ands	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261e:	4b4f      	ldr	r3, [pc, #316]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002622:	4b4e      	ldr	r3, [pc, #312]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	0249      	lsls	r1, r1, #9
 8002628:	430a      	orrs	r2, r1
 800262a:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800262c:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800262e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002630:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002632:	494c      	ldr	r1, [pc, #304]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002634:	400a      	ands	r2, r1
 8002636:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002638:	4b48      	ldr	r3, [pc, #288]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	d016      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fc39 	bl	8000ebc <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800264e:	e00c      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe fc34 	bl	8000ebc <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	4a43      	ldr	r2, [pc, #268]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d904      	bls.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002660:	2313      	movs	r3, #19
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2203      	movs	r2, #3
 8002666:	701a      	strb	r2, [r3, #0]
          break;
 8002668:	e004      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800266a:	4b3c      	ldr	r3, [pc, #240]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	2202      	movs	r2, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d0ed      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002674:	2313      	movs	r3, #19
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	4a37      	ldr	r2, [pc, #220]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800268e:	430a      	orrs	r2, r1
 8002690:	65da      	str	r2, [r3, #92]	; 0x5c
 8002692:	e005      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002694:	2312      	movs	r3, #18
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2213      	movs	r2, #19
 800269a:	18ba      	adds	r2, r7, r2
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026a0:	2311      	movs	r3, #17
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b2c      	ldr	r3, [pc, #176]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ae:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026b0:	492e      	ldr	r1, [pc, #184]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	2203      	movs	r2, #3
 80026c6:	4393      	bics	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2240      	movs	r2, #64	; 0x40
 80026da:	4013      	ands	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026de:	4b1f      	ldr	r3, [pc, #124]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	01db      	lsls	r3, r3, #7
 80026fa:	4013      	ands	r3, r2
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	0899      	lsrs	r1, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800270c:	430a      	orrs	r2, r1
 800270e:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d009      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002722:	4013      	ands	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800272c:	430a      	orrs	r2, r1
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	da09      	bge.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	22e0      	movs	r2, #224	; 0xe0
 800273e:	4393      	bics	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800274c:	2312      	movs	r3, #18
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	781b      	ldrb	r3, [r3, #0]
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b006      	add	sp, #24
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	40021000 	.word	0x40021000
 8002760:	fffffcff 	.word	0xfffffcff
 8002764:	fffeffff 	.word	0xfffeffff
 8002768:	00001388 	.word	0x00001388
 800276c:	efffffff 	.word	0xefffffff
 8002770:	ffffcfff 	.word	0xffffcfff
 8002774:	ffff3fff 	.word	0xffff3fff

08002778 <__libc_init_array>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	2600      	movs	r6, #0
 800277c:	4d0c      	ldr	r5, [pc, #48]	; (80027b0 <__libc_init_array+0x38>)
 800277e:	4c0d      	ldr	r4, [pc, #52]	; (80027b4 <__libc_init_array+0x3c>)
 8002780:	1b64      	subs	r4, r4, r5
 8002782:	10a4      	asrs	r4, r4, #2
 8002784:	42a6      	cmp	r6, r4
 8002786:	d109      	bne.n	800279c <__libc_init_array+0x24>
 8002788:	2600      	movs	r6, #0
 800278a:	f000 f821 	bl	80027d0 <_init>
 800278e:	4d0a      	ldr	r5, [pc, #40]	; (80027b8 <__libc_init_array+0x40>)
 8002790:	4c0a      	ldr	r4, [pc, #40]	; (80027bc <__libc_init_array+0x44>)
 8002792:	1b64      	subs	r4, r4, r5
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	42a6      	cmp	r6, r4
 8002798:	d105      	bne.n	80027a6 <__libc_init_array+0x2e>
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	00b3      	lsls	r3, r6, #2
 800279e:	58eb      	ldr	r3, [r5, r3]
 80027a0:	4798      	blx	r3
 80027a2:	3601      	adds	r6, #1
 80027a4:	e7ee      	b.n	8002784 <__libc_init_array+0xc>
 80027a6:	00b3      	lsls	r3, r6, #2
 80027a8:	58eb      	ldr	r3, [r5, r3]
 80027aa:	4798      	blx	r3
 80027ac:	3601      	adds	r6, #1
 80027ae:	e7f2      	b.n	8002796 <__libc_init_array+0x1e>
 80027b0:	08002828 	.word	0x08002828
 80027b4:	08002828 	.word	0x08002828
 80027b8:	08002828 	.word	0x08002828
 80027bc:	0800282c 	.word	0x0800282c

080027c0 <memset>:
 80027c0:	0003      	movs	r3, r0
 80027c2:	1882      	adds	r2, r0, r2
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <memset+0xa>
 80027c8:	4770      	bx	lr
 80027ca:	7019      	strb	r1, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	e7f9      	b.n	80027c4 <memset+0x4>

080027d0 <_init>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr

080027dc <_fini>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr
